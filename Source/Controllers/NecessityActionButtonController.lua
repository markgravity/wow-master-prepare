---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by markg.
--- DateTime: 21/06/2021 22:20
---
local EVENT = MasterCore.EVENT.BAG_UPDATE
local ContainerItemInfo = MasterCore.ContainerItemInfo
local Config = MasterPrepare.Config
local AceEvent = LibStub("AceEvent-3.0")
local NECESSITY_ITEM_TYPE = MasterPrepare.NECESSITY_ITEM_TYPE
local MESSAGE = MasterPrepare.MESSAGE

local NecessityActionButtonController, super = MasterCore.Class:Create("NecessityActionButtonController", MasterCore.EventController)
MasterPrepare.NecessityActionButtonController = NecessityActionButtonController

function NecessityActionButtonController:Init(type)
    self = super.Init(self, {
        EVENT.BAG_UPDATE
    })

    self.type = type
    return self
end

function NecessityActionButtonController:OnMessage(message, food, drink)
    if message == MESSAGE.PREPRATION_CHECKED then
        if self.type == NECESSITY_ITEM_TYPE.FOOD then
            self.prepration = food
            self.config = Config.food
        end

        if self.type == NECESSITY_ITEM_TYPE.DRINK then
            self.prepration = drink
            self.config = Config.drink
        end

        self:_Check()
    end
end
function NecessityActionButtonController:_Check()
    local key = self.config:GetActionBarKey()
    local actionSlot = GetActionSlot(key)
    local _, itemID = GetActionInfo(actionSlot)

    if self.actionItem == nil then
        self.actionItem = self:_FindItemWithHighestNumber(self.prepration.suitableItems)

        if self.actionItem then
            self:_Swap(self.actionItem, actionSlot)
        end
        return
    end

    -- Re-swap when action item was removed from this slot
    if itemID ~= self.actionItem.id then
        self:_Swap(self.actionItem, actionSlot)
    end

    -- Stop when action item still in stock
    local containerItemInfo = ContainerItemInfo:Init(self.actionItem.bag, self.actionItem.slot)
    if containerItemInfo.itemCount ~= nil and containerItemInfo.itemCount > 0 then
        return
    end

    -- Find a new one when the previous is out of stock
    self.actionItem = self:_FindItemWithHighestNumber(self.prepration.suitableItems)
    --print("Swap")
    self:_Swap(self.actionItem, actionSlot)
end

function NecessityActionButtonController:_Swap(item, actionSlot)
    PickupContainerItem(item.bag, item.slot)
    PlaceAction(actionSlot)
    PutItemInBackpack()
end

function NecessityActionButtonController:_FindItemWithHighestNumber(suitableItems)
    local items = {}
    for bag = 0, NUM_BAG_SLOTS do
        local numSlots = GetContainerNumSlots(bag)
        if numSlots > 0 then
            for slot = 1, numSlots do
                local containerItemInfo = ContainerItemInfo:Init(bag, slot)
                local itemID = GetItemID(containerItemInfo.itemLink)

                if itemID and suitableItems[itemID] ~= nil then
                    if items[itemID] == nil then
                        items[itemID] = {
                            id = itemID,
                            bag = bag,
                            slot = slot,
                            count = 0
                        }
                    end
                    items[itemID].count = items[itemID].count + containerItemInfo.itemCount
                end
            end
        end
    end

    local highestItem
    for _, item in pairs(items) do
        if highestItem == nil then
            highestItem = item
        else
            if item.count > highestItem.count then
                highestItem = item
            end
        end
    end

    return highestItem
end
