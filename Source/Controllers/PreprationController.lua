---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by markg.
--- DateTime: 19/06/2021 18:42
---
local FWService = MasterPrepare.FWService
local FW_TYPE = MasterPrepare.FW_TYPE
local EVENT = MasterCore.EVENT
local AceEvent = LibStub("AceEvent-3.0")
local MESSAGE = MasterPrepare.MESSAGE
local Config = MasterPrepare.Config
local GearRepairService = MasterPrepare.GearRepairService
local GearSellService = MasterPrepare.GearSellService
local Dialog = MasterCore.Dialog
local ContainerItemInfo = MasterCore.ContainerItemInfo
local ItemInfo = MasterCore.ItemInfo

local PreparationController, super = MasterCore.Class:Create("PreparationController", MasterCore.EventController)
MasterPrepare.PreparationController = PreparationController

function PreparationController:Init()
    self = super.Init(self, {
        EVENT.MERCHANT_SHOW,
        EVENT.BAG_UPDATE,
        EVENT.BAG_OPEN,
        EVENT.TAXIMAP_OPENED,
        EVENT.CONFIRM_SUMMON,
        EVENT.PLAYER_ENTERING_WORLD
    })
    self.food = FWService:Init(FW_TYPE.FOOD)
    self.water = FWService:Init(FW_TYPE.WATER)
    self.gearRepair = GearRepairService:Init()
    self.gearSell = GearSellService:Init()
    self.allJunkItems = {}
    self.isChecking = false

    -- Check when config is updated
    AceEvent:RegisterMessage(MESSAGE.CONFIG_UPDATED, function()
        self:_Check()
    end)
    return self
end

function PreparationController:OnEvent(event)
    if event == EVENT.MERCHANT_SHOW then
        Wait(1, function()
            self:_Check()
            self:_Prepare()
        end)
        return
    end

    if event == EVENT.BAG_UPDATE or event == EVENT.PLAYER_ENTERING_WORLD then
        self:_Check()
        return
    end

    -- if event == EVENT.TAXIMAP_OPENED or event == EVENT.CONFIRM_SUMMON then
    --     local isPrepared = self:_Check()
    --     if not isPrepared then
    --         Dialog:Confirm("YOU'RE NOT PREPARED!!\nAre you sure you want to go?")
    --     end
    -- end
end

function PreparationController:_Check()
    if self.isChecking then
        return
    end
    self.isChecking = true

    local checkCount = 0
    local totalCheck = 4
    local junkItems = {}

    -- Food
    if Config.food.buy:GetEnable() then
        if self.food:Check() then
            --print("food")
            checkCount = checkCount + 1
        end
        table.merge(junkItems, self.food.junkItems)
    else
        checkCount = checkCount + 1
    end

    -- Drink
    if Config.water.buy:GetEnable() then
        if self.water:Check() then
            checkCount = checkCount + 1
        end
        table.merge(junkItems, self.water.junkItems)
    else
        checkCount = checkCount + 1
    end

    -- Repair
    if Config.gear.repair:GetEnable() then
        if self.gearRepair:Check() then
            --print("repair")
            checkCount = checkCount + 1
        end
    else
        checkCount = checkCount + 1
    end

    -- Sell Junk
    if Config.gear.sell:GetEnable() then
        if self.gearSell:Check() then
            --print("sell")
            checkCount = checkCount + 1
        end
        table.merge(junkItems, self.gearSell.items)
    else
        checkCount = checkCount + 1
    end

    --print(checkCount, totalCheck)
    local isPrepared = checkCount == totalCheck
    AceEvent:SendMessage(MESSAGE.PREPRATION_CHECKED, isPrepared, self.food, self.water, self.gearRepair, self.gearSell)

    AceEvent:SendMessage(MESSAGE.JUNK_ITEMS_UPDATED, junkItems)
    self.allJunkItems = junkItems

    self.isChecking = false
    return isPrepared
end

function PreparationController:_Prepare()
    local numFoodNeeded = self.food.numberNeeded
    local numDrinkNeeded = self.water.numberNeeded
    local totalSellPrice = 0

    -- Nothing to restock
    if numFoodNeeded + numDrinkNeeded <= 0 then
        totalSellPrice = totalSellPrice + self:_Sell(self.food.junkItems)
        totalSellPrice = totalSellPrice + self:_Sell(self.water.junkItems)
    else
        -- Buy foods or waters from merchant, if it's available
        for i = 1, GetMerchantNumItems() do
            local itemLink = GetMerchantItemLink(i)
            local itemID = GetItemID(itemLink)
            if numFoodNeeded > 0 and self.food.suitableItems[itemID] ~= nil then
                MassiveBuyMerchantItem(i, numFoodNeeded)
                numFoodNeeded = 0
                totalSellPrice = totalSellPrice + self:_Sell(self.food.junkItems)
            end

            if numDrinkNeeded > 0 and self.water.suitableItems[itemID] ~= nil then
                MassiveBuyMerchantItem(i, numDrinkNeeded)
                numDrinkNeeded = 0
                totalSellPrice = totalSellPrice + self:_Sell(self.water.junkItems)
            end

            -- All restock
            if numFoodNeeded + numDrinkNeeded <= 0 then
                break
            end
        end
    end

    -- Auto Repair
    local cost = GetRepairAllCost()
    if CanMerchantRepair() and Config.gear.repair:GetEnable() and cost > 0 then
        RepairAllItems()
        self:_PrintMoney("You repaired your armor for %s", cost)
    end

    -- Gear sell
    if self.gearSell.needed then
        totalSellPrice = totalSellPrice + self:_Sell(self.gearSell.items)
    end

    -- Print out total sell price
    if totalSellPrice > 0 then
        self:_PrintMoney("You sold your junk for %s", totalSellPrice)
    end

    self:_Check()
end

function PreparationController:_Sell(items)
    local totalSellPrice = 0
    for bag = 0, NUM_BAG_SLOTS do
        local numSlots = GetContainerNumSlots(bag)
        if numSlots > 0 then
            for slot = 1, numSlots do
                local containerItemInfo = ContainerItemInfo:Init(bag, slot)
                local itemID = GetContainerItemID(bag, slot)
                local item = ItemInfo:Init(itemID)
                if item and items[itemID] then
                    totalSellPrice = totalSellPrice + item.sellPrice * containerItemInfo.itemCount
                    SellContainerItemToMerchant(bag, slot)
                end
            end
        end
    end

    return totalSellPrice
end

function PreparationController:_PrintMoney(pattern, value)
    self:_Print(pattern, GetMoneyString(value, true), 'MONEY')
end

function PreparationController:_Print(pattern, value, channel)
    local i = 1
    local frame = _G['ChatFrame' .. i]
    channel = 'CHAT_MSG_' .. channel

    while frame do
        if frame:IsEventRegistered(channel) then
            ChatFrame_MessageEventHandler(frame, channel, pattern:format(value), '', nil, '')
        end

        i = i + 1
        frame = _G['ChatFrame' .. i]
    end
end
