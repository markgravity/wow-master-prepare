---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by markg.
--- DateTime: 19/06/2021 17:42
---

local ContainerItemInfo = MasterCore.ContainerItemInfo
local UNIT = MasterCore.UNIT
local Config = MasterPrepare.Config
local VENDOR_FOODS = MasterPrepare.VENDOR_FOODS
local VENDOR_DRINKS = MasterPrepare.VENDOR_DRINKS

local NECESSITY_ITEM_TYPE = {
    FOOD = 1,
    DRINK = 2
}
MasterPrepare.NECESSITY_ITEM_TYPE = NECESSITY_ITEM_TYPE

local NecessityItemPreparation, super = MasterCore.Class:Create("NecessityItemPreparation")
MasterPrepare.NecessityItemPreparation = NecessityItemPreparation

function NecessityItemPreparation:Init(type)
    self = super.Init(self)
    self.type = type
    self.suitableItems = { }
    self.numberNeeded = 0
    return self
end

function NecessityItemPreparation:Check()
    local config = self:_GetConfig()

    self.suitableItems = self:_FindMostSuitableItems()
    local numberNeeded, current = self:_GetNumberNeeded(self.suitableItems)
    self.numberNeeded = numberNeeded

    return current >= config:GetMinRestock(), self.suitableItems, self.numberNeeded
end

function NecessityItemPreparation:GetJunks()
    local config = self:_GetConfig()
    local items = self:_GetItems()
    local junkItems = {}

    local level
    for _, item in pairs(self.suitableItems) do
        level = item.minLevel - 1
        break
    end

    if config:GetSellJunks() then
        for _, item in ipairs(items) do
            if item.minLevel <= level then
                junkItems[item.id] = true
            else
                break
            end
        end
    end

    return junkItems
end

function NecessityItemPreparation:_FindMostSuitableItems()
    local baseSuitableItem
    local playerLevel = UnitLevel(UNIT.PLAYER)
    local suitableItems = {}
    local config = self:_GetConfig()
    local items = self:_GetItems()
    local playerStat = self:_GetPlayerStat()

    for i = 1, #items do
        local item = items[#items + 1 - i]

        -- Add items at the same tier
        if baseSuitableItem ~= nil then
            -- No more item at the same tier
            if item.effectValue ~= baseSuitableItem.effectValue then
                break
            end
            suitableItems[item.id] = item
        else
            -- Find a suitable item
            repeat
                -- Checking usable
                if config:GetCriteriaUsable() and item.minLevel > playerLevel then
                    break
                end

                -- Checing effect value
                if config:GetCriteriaMostValue() and item.effectValue > playerStat then
                    break
                end

                baseSuitableItem = item
                suitableItems[item.id] = item
                break
            until true
        end
    end

    return suitableItems
end

function NecessityItemPreparation:_GetNumberNeeded(items)
    local config = self:_GetConfig()
    local current = self:_GetTotalQuantityInBags(items)

    if (config:GetAlwaysRestock() and current < config:GetMaxRestock())
            or current < config:GetMinRestock() then
        return config:GetMaxRestock() - current, current
    end
    return 0, current
end

function NecessityItemPreparation:_GetTotalQuantityInBags(items)
    local totalQuantity = 0
    for _, item in pairs(items) do
        for bag = 0, NUM_BAG_SLOTS do
            local numSlots = GetContainerNumSlots(bag)
            if numSlots > 0 then
                for slot = 1, numSlots do
                    local itemID = GetContainerItemID(bag, slot)
                    if item.id == itemID then
                        local containerItemInfo = ContainerItemInfo:Init(bag, slot)
                        totalQuantity = totalQuantity + containerItemInfo.itemCount
                    end
                end
            end
        end
    end

    return totalQuantity
end

function NecessityItemPreparation:_GetConfig()
    if self.type == NECESSITY_ITEM_TYPE.FOOD then
        return Config.food
    end

    if self.type == NECESSITY_ITEM_TYPE.DRINK then
        return Config.drink
    end
end

function NecessityItemPreparation:_GetItems()
    if self.type == NECESSITY_ITEM_TYPE.FOOD then
        return VENDOR_FOODS
    end

    if self.type == NECESSITY_ITEM_TYPE.DRINK then
        return VENDOR_DRINKS
    end
end

function NecessityItemPreparation:_GetPlayerStat()
    if self.type == NECESSITY_ITEM_TYPE.FOOD then
        return UnitHealthMax(UNIT.PLAYER)
    end

    if self.type == NECESSITY_ITEM_TYPE.DRINK then
        return UnitPowerMax(UNIT.PLAYER, 0)
    end
end